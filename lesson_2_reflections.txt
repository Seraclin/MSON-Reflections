What happens when you initialize a repository? Why do you need to do it?
	When you make a new repository, it is empty of any commits. Preexisting files are not tracked yet. Initializing a repo helps keep track of version history of the file for when you do commit it.
How is the staging area different from the working directory and the repository?
What value do you think it offers?
	The staging area is the intermediary between the two. Changes can still be added to it but not committed and more changes can be added before becoming a commit of a different version. It allow the user to group files together per commit with as of a significant change as the user wants. So instead of going straight to committing a change, you can designate if you want to have certain documents changed together in a batch.
How can you use the staging area to make sure you have one commit per logical
change?
	Only add files to the staging area after making a change. After adding it the staging area you can make sure there are no other files being committed with it, so only file is being committed because you only added one.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?